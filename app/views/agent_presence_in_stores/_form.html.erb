<h4 id='notification'></h4>
<%= simple_form_for(@agent_presence_in_store, html: { id: "agent_presence_form" }) do |f| %>
  <%= f.error_notification %>
  <%= f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present? %>
  <div class="form-inputs">
    <%= f.association :user, as: :hidden %>
    <%= f.association :buyer, as: :hidden %>
    <%= f.input :latitude, as: :hidden, input_html: { id: "agent_latitude" } %>
    <%= f.input :longitude, as: :hidden, input_html: { id: "agent_longitude" } %>
    <%= f.input :status, as: :hidden %>
    <%= f.input :distance_in_meters, as: :hidden, input_html: { id: "distance_in_meters" } %>
  </div>

  <div class="form-actions">
    <%= f.button :submit, 'кликните сюда' %>
  </div>
<% end %>

<div id='buyer-latitude' data-buyer-latitude="<%= @agent_presence_in_store.buyer.latitude %>"></div>
<div id='buyer-longitude' data-buyer-longitude="<%= @agent_presence_in_store.buyer.longitude %>"></div>

<div id="map" style="height: 400px;"></div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.css" rel="stylesheet"/>

<script>
  $(document).on('turbo:load', function() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        // Update latitude and longitude fields with current location
        document.getElementById('agent_latitude').value = position.coords.latitude;
        document.getElementById('agent_longitude').value = position.coords.longitude;

        // Retrieve buyer's latitude and longitude from dataset
        var buyerLatitude = parseFloat(document.getElementById('buyer-latitude').dataset.buyerLatitude);
        var buyerLongitude = parseFloat(document.getElementById('buyer-longitude').dataset.buyerLongitude);

        // Calculate distance between user and buyer
        var userLatitude = position.coords.latitude;
        var userLongitude = position.coords.longitude;

        // Calculate distance using Haversine formula
        var distance = haversineDistance(userLatitude, userLongitude, buyerLatitude, buyerLongitude);

        // Update distance_in_meters field
        document.getElementById('distance_in_meters').value = Math.round(distance);
        document.getElementById('notification').innerHTML = `Вы находитесь на расстоянии ${Math.round(distance)} метров от покупателя, перезагрузите страницу, если расчет кажется неверным`;

        // Initialize the map
        var map = L.map('map').setView([userLatitude, userLongitude], 13);

        // Add the buyer's marker to the map
        L.marker([buyerLatitude, buyerLongitude]).addTo(map)
          .bindPopup('Buyer Location')
          .openPopup();

        // Add the user's marker to the map
        L.marker([userLatitude, userLongitude]).addTo(map)
          .bindPopup('Your Location')
          .openPopup();

        // Add the tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          maxZoom: 19,
        }).addTo(map);
      });
    }
  });

  // Haversine formula to calculate distance
  function haversineDistance(lat1, lon1, lat2, lon2) {
    // Radius of the Earth in kilometers
    var radius = 6371;

    // Convert latitude and longitude from degrees to radians
    var lat1Rad = Math.PI * lat1 / 180;
    var lon1Rad = Math.PI * lon1 / 180;
    var lat2Rad = Math.PI * lat2 / 180;
    var lon2Rad = Math.PI * lon2 / 180;

    // Haversine formula
    var dLon = lon2Rad - lon1Rad;
    var dLat = lat2Rad - lat1Rad;
    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(lat1Rad) * Math.cos(lat2Rad) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var distance = radius * c;

    // Convert distance to meters
    return distance * 1000;
  }
</script>
